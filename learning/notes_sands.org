# Time-stamp: <2016-12-21 Wed 18:00:02 Shaikh>
#+TITLE: Notes, More Like Sands.
#+AUTHOR: Shaikh
#+DATE: [2016-03-12 Sat]
#+LaTeX_HEADER: \usemintedstyle{murphy}
#+SETUPFILE: /home/shaikh/Documents/Shaikh/org/org-html-themes/setup/theme-readtheorg.setup

* Object-Oriented Programming
** class, attribute, field, variable, object, instance...
From [[http://python.swaroopch.com/][A Byte of Python]] chapter 13.

A /class/ creates a new /type/. An /object/ is the /instance/ of a
/class/.

A /class/ has two *attributes* which are *field* and *method*.
Variables that belong to /object/ or /class/ are referred as *instance
variables* or *class variables* respectively, they consist of *field*.
*Method* is the functions belong to the /class/.

The difference between a /class/ and a /function/ is that the former
does have an intrinsic argument =self= in every method which need no
value when you call it.

Usually, there always be a =__init__= method in the definition of a
/class/ and as named, for initialization.

All /class/ members (including the data members) are *public* and all
the methods are *virtual* in Python with one exception: with names
using /double underscore/.
** inheritance
| type       | subtype       |
|------------+---------------|
| baseclass  | derived class |
| superclass | subclass      |

Python does not automatically call the constructor of the base class,
you have to explicitly call it yourself.
** polymorphism
From Wikipedia.

In programming languages and type theory, polymorphism is the provision of a
single interface to entities of different types. A polymorphic type is one whose
operations can also be applied to values of some other type, or types. There are
several fundamentally different kinds of polymorphism:

+ *Ad hoc polymorphism*: when a function denotes different and potentially
  heterogeneous implementations depending on a limited range of individually
  specified types and combinations. Ad hoc polymorphism is supported in many
  languages using function overloading.
+ *Parametric polymorphism*: when code is written without mention of any specific
  type and thus can be used transparently with any number of new types. In the
  object-oriented programming community, this is often known as generics or
  generic programming. In the functional programming community, this is often
  shortened to polymorphism.
+ *Subtyping* (also called subtype polymorphism or inclusion polymorphism): when a
  name denotes instances of many different classes related by some common
  superclass.[3] In the object-oriented programming community, this is often
  referred to as simply polymorphism.

The interaction between parametric polymorphism and subtyping leads to the concepts of variance and bounded quantification.
** add a method to an instance or a class
1. To an instance.

   #+BEGIN_SRC python
     from types import MethodType

     class Student(object):
         pass


     def set_age(self, age):
         self.age = age

     s = Student()
     s.set_age = MethodType(set_age, s)
   #+END_SRC

2. To a class

   #+BEGIN_SRC python
     # follow the above example
     Student.set_age = set_age
   #+END_SRC
** ~__slots__~ variable
~__slots__~ is usually used to restrict the allowed variables of a *class*. Its
value is a tuple.

~__slots__~ affects only the instances created by the class, not ones of their
subclasses. One can simply use ~=~ to change the value of ~__slots__~ outside of
the class definition. However, this does change the value but the restrictions
do not change accordingly.

One way to bypass ~__slots__~ is defining a set-variable-method and adding this
method to the class.

Subclasses can inherit the ~__slots__~ by defining their own ~__slots__~ which
will *append* to the superclass's ~__slots__~.
* Exceptions
** with statement
See [[https://www.python.org/dev/peps/pep-0343/][PEP 343]] for details. It is a simple and elegant way to replace the
=try...except...finally= statement in some situations.

Usually, it's like:

#+BEGIN_SRC python
  with EXPR as VAR:
      BLOCK
#+END_SRC

and is translated to:

#+BEGIN_SRC python
  mgr = (EXPR)
  exit = type(mgr).__exit__       # Not calling it ye
  value = type(mgr).__enter__(mgr)
  exc = True
  try:
      try:
          VAR = value             # Only if "as VAR" is present
          BLOCK
      except:
          # The exceptional case is handled here
          exc = False
          if not exit(mgr, *sys.exc_info()):
              raise
          # The exception is swallowed if exit() returns
          # true
  finally:
      # The normal and non-local-goto cases are handled here
      if exec:
          exit(mgr, None, None, None)
#+END_SRC
* Functions
** function name
The name of a function is, actually, the reference to an object of that
function. Therefore it is completely O.K. to assign the name to a variable like
an 'alias'.
** parameters
Order: positional \rightarrow default (keyword) \rightarrow variable
positional (=*args=) *or* keyword-only (=*, key1, key2, ...=). \rightarrow
variable keywords (=**kw=)
* Misc
** Unary +
equals to =operator.__pos__()=. One of its affect as far as I know is to
get the value with its original precision.
