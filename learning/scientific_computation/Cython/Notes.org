#+TITLE: Notes of Using *Cython* to Speedup!
#+Time-stamp: <2017-06-15 Thu 19:56:13 Shaikh>

* Python Bottleneck
** CPU-dominated work
1. mathematical calculations.
2. loops, recursions.
** Parser
1. XML parser
2. JSON parser
* Almost the Same
** I/O related
This is mostly affected by the *hardwares*. A SSD disk improves much more than
changing programming languages.
** Network manipulation
GFW? 10M Download V.S. 1M UP? 2RMB/GB net traffic?
* Where We Translate Our Codes to Cython
** Data types
Not only the usual =int=, =double=, =complex= but also the original Python types
=list=, =set=, =dict=, all these need to be static declared.
** Functions definition
=cdef= and =cpdef= with proper return types.
** Nested python data structures
List-of-tuples-of-....., please transform them to =C= =struct= or =array=.
** Core math function
Use the ones in =C= libraries.

#+BEGIN_SRC python
  from libc.math cimport sqrt, exp
#+END_SRC

** Nested loops
Use ~cython -a~ to make sure that the whole nested loops are fully converted to
its =C= version: all variable static declared and no /yellow/ lines.
** Type as many as possible
=C= data types, =Python= types, =Python= class-instances, user-defined
functions, user-defined class-instances.
** =inline= is important
For small functions in =.pyx= file, use =inline= keyword before type declaration is important.
** ~cython.cdivision(True)~ is "not" that important
Although in "--annotate", it's marked a light-yellow line, this
"compiler-directive" does not affect performance much and may result in safety problems.

However, if a division operation is inside a ~for~ loop and the loop is huge,
this directive matters.
